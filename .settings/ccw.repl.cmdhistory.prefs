cmdhistory=["(correct \\"delte\\")" "(get-all-users)" "(render \\"home.html\\")" "(get-all-users)" "(words \\"cao cao zdravo\\")" "(map correct (words \\"cao cao zdravo\\"))" "(map correct (words \\"detle delete helo\\"))" "interpose(\\" \\", (map correct (words \\"this is some text\\")))" "(apply \\n  str(\\n       interpose(\\" \\", \\n                  (map correct \\n (words \\"this is some text\\")))))" "(words \\"Cao zdravo bela cao\\")" "(map (correctword (words \\"Cao zdravo bela cao\\")))" "(map correctword (words \\"Cao zdravo bela cao\\"))" "(apply str (interpose \\" \\" (map (correctword (words \\"Cao zdravo bela cao\\")))))" "(apply str (interpose \\" \\" (map correctword (words \\"Cao zdravo bela cao\\"))))" "(correcttext \\"Cao zdravo bela cao\\")" "(wrtr)" "(with-open [wrtr (writer \\"data/big.txt\\")]\\r\\n  (.write wrtr \\"Line to be written\\"))" "(let [wrtr (io/writer \\"data/big.txt\\" \:append true)]\\r\\n  (.write wrtr \\"hello again\!\\")\\r\\n  (.close wrtr))" "(with-open [wrtr (writer \\"data/big.txt\\")]\\r\\n  (.write wrtr \\"Line to be written\\"))" "(with-open [wrtr (writer \\"data/big.txt\\")]\\r\\n  (.write wrtr \\"Line to be written2\\"))" "(improve_training_txt \\"cao cao\\")" "(improve_training_txt \\"cao zdravo\\")" "(improve_training_txt \\"cao cao\\")" "(improve_training_txt \\"cao caosss\\")" "(improve_training_txt \\"dodaj linijui\\")" "(improve_training_txt \\"dodaj linijui 2\\")" "(improve_training_txt \\"dodaj linijui 3\\")" "(spit \\"data/big.txt\\")" "(improve_training_txt \\"linija 1\\")" "(improve_training_txt \\"linija 2\\")" "(improve_training_txt \\"linija 3\\")" "(concat \\"a\\" \\"b\\")" "(concat [\\"a\\" \\"b\\"])" "(improve_training_txt \\"neki text\\")" "(improve_training_txt \\"neki drugi text\\")" "(improve_training_txt \\"dodatak\\")" "(improve_training_txt \\"dodata200\\")" "(improve_training_txt \\"dodatakasfdasdf\\"a)" "(improve_training_txt \\"dodataasdadsak\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"dodataasdadsak\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"dodataasdadsak\\")" "(.length (io/file \\"data/big.txt\\"))" "(if (< (.length (io/file \\"data/big.txt\\")) 104857600) println-str((.length (io/file \\"data/big.txt\\"))))" "(if (< (.length (io/file \\"data/big.txt\\")) 104857600) println((.length (io/file \\"data/big.txt\\"))))" "(if (< (.length (io/file \\"data/big.txt\\")) 104857600) print ((.length (io/file \\"data/big.txt\\"))))" "(print \\"a\\")" "(print ((.length (io/file \\"data/big.txt\\"))))" "(println ((.length (io/file \\"data/big.txt\\"))))" "(improve_training_txt \\"neki tekst\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"neki tekst\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304149 je sada velicina\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304174 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304197 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304220 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304243 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304266 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304289 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(improve_training_txt \\"1304289 je velicina\!\!\!\\")" "(.length (io/file \\"data/big.txt\\"))" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 1)" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 4)" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(gen-docs-w-sentences \\"test-documents\\")" "(sentences-in-document \\"test-documents/test2.txt\\")" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-/test2.txt\\" 0.2 0.1 3)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 1)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(sentences-in-document \\"test-documents/test2.txt\\")" "(defn gen-idf-map-from-docs-sentences\\r\\n  \\"This function generates a map with all words IDF\\"\\r\\n  [documents-w-sentences]\\r\\n  (let [documents-w-words (map set (map words-in-document-sentences\\r\\n                                        documents-w-sentences))]\\r\\n    (idf-words documents-w-words)))" "(gen-idf-map-from-docs-sentences\\r\\n                 [\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"])" "(gen-docs-w-sentences \\"test-documents\\")" "(gen-idf-map-from-docs-sentences\\r\\n                    [[\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]])" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3)" "(sentences-in-document \\"test-documents/test2.txt\\")" "(gen-idf-map-from-docs-sentences\\r\\n                 [\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"])" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(gen-docs-w-sentences \\"test-documents\\")" "(gen-idf-map-from-docs-sentences\\r\\n                 [[\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]])" "(into [] (mapcat  identity [[\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]]))" "(gen-docs-w-sentences \\"test-documents\\")" "(into [] (reduce concat (for [s [[\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]]]\\r\\n                                             (map (partial tfidf-vector-from-sentence\\r\\n                                                           idf-map)\\r\\n                                                  s))))" "(gen-docs-w-sentences \\"test-documents\\")" "(gen-idf-map-from-docs-sentences\\r\\n                 [[\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]])" "(into [] (reduce concat (for [s (gen-docs-w-sentences \\"test-documents\\")] \\n                          (map (partial tfidf-vector-from-sentence   \\n                                        (gen-idf-map-from-docs-sentences\\r\\n                                          (gen-docs-w-sentences \\"test-documents\\"))) s))))" "(matrix  (into [] \\n               (for [i [{\\"are\\" 0.0,\\r\\n  \\"started\\" 0.0,\\r\\n  \\"steps\\" 0.0,\\r\\n  \\"this\\" 0.0,\\r\\n  \\"it\\" 0.0,\\r\\n  \\"different\\" 0.0,\\r\\n  \\"you\\" 0.0,\\r\\n  \\"post\\" 0.0,\\r\\n  \\"necessary\\" 0.0,\\r\\n  \\"that\\" 0.0,\\r\\n  \\"show\\" 0.0,\\r\\n  \\"blog\\" 0.0,\\r\\n  \\"walk\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"and\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"how\\" 0.0,\\r\\n  \\"with\\" 0.0,\\r\\n  \\"will\\" 0.0,\\r\\n  \\"through\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"use\\" 0.0,\\r\\n  \\"get\\" 0.0,\\r\\n  \\"we\\" 0.0,\\r\\n  \\"the\\" 0.0,\\r\\n  \\"in\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"3\\" 0.0,\\r\\n  \\"hello\\" 0.0,\\r\\n  \\"which\\" 0.0,\\r\\n  \\"of\\" 0.0,\\r\\n  \\"run\\" 0.0,\\r\\n  \\"benefits\\" 0.0,\\r\\n  \\"demonstrate\\" 0.0,\\r\\n  \\"application\\" 0.0,\\r\\n  \\"a\\" 0.0,\\r\\n  \\"on\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"create\\" 0.0,\\r\\n  \\"will\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"containers\\" 0.0,\\r\\n  \\"we\\" 0.0,\\r\\n  \\"simple\\" 0.0,\\r\\n  \\"the\\" 0.0,\\r\\n  \\"world\\" 0.0,\\r\\n  \\"nodejs\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"running\\" 0.0,\\r\\n  \\"by\\" 0.0,\\r\\n  \\"http\\" 0.0,\\r\\n  \\"another\\" 0.0,\\r\\n  \\"an\\" 0.0,\\r\\n  \\"distributed\\" 0.0,\\r\\n  \\"on\\" 0.0,\\r\\n  \\"instance\\" 0.0,\\r\\n  \\"be\\" 0.0,\\r\\n  \\"nodes\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"haproxy\\" 0.0,\\r\\n  \\"these\\" 0.0,\\r\\n  \\"will\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"requests\\" 0.0,\\r\\n  \\"contain\\r\\ner\\" 0.0,\\r\\n  \\"nodejs\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"applications\\" 0.0,\\r\\n  \\"is\\" 0.0,\\r\\n  \\"used\\" 0.0,\\r\\n  \\"run\\" 0.0,\\r\\n  \\"define\\" 0.0,\\r\\n  \\"a\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"and\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"tool\\" 0.0,\\r\\n  \\"with\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"complex\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"running\\" 0.0,\\r\\n  \\"which\\" 0.0,\\r\\n  \\"up\\" 0.0,\\r\\n  \\"command\\" 0.0,\\r\\n  \\"does\\" 0.0,\\r\\n  \\"it\\" 0.0,\\r\\n  \\"you\\" 0.0,\\r\\n  \\"can\\" 0.0,\\r\\n  \\"that\\" 0.0,\\r\\n  \\"application\\" 0.0,\\r\\n  \\"define\\" 0.0,\\r\\n  \\"spin\\" 0.0,\\r\\n  \\"a\\" 0.0,\\r\\n  \\"be\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"and\\" 0.0,\\r\\n  \\"everything\\" 0.0,\\r\\n  \\"with\\" 0.0,\\r\\n  \\"file\\" 0.0,\\r\\n  \\"single\\" 0.0,\\r\\n  \\"then\\" 0.0,\\r\\n  \\"needs\\" 0.0,\\r\\n  \\"your\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"multicontainer\\" 0.0,\\r\\n  \\"get\\" 0.0,\\r\\n  \\"done\\" 0.0,\\r\\n  \\"in\\" 0.0}]]\\r\\n                 (into [] (for [j [{\\"are\\" 0.0,\\r\\n  \\"started\\" 0.0,\\r\\n  \\"steps\\" 0.0,\\r\\n  \\"this\\" 0.0,\\r\\n  \\"it\\" 0.0,\\r\\n  \\"different\\" 0.0,\\r\\n  \\"you\\" 0.0,\\r\\n  \\"post\\" 0.0,\\r\\n  \\"necessary\\" 0.0,\\r\\n  \\"that\\" 0.0,\\r\\n  \\"show\\" 0.0,\\r\\n  \\"blog\\" 0.0,\\r\\n  \\"walk\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"and\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"how\\" 0.0,\\r\\n  \\"with\\" 0.0,\\r\\n  \\"will\\" 0.0,\\r\\n  \\"through\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"use\\" 0.0,\\r\\n  \\"get\\" 0.0,\\r\\n  \\"we\\" 0.0,\\r\\n  \\"the\\" 0.0,\\r\\n  \\"in\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"3\\" 0.0,\\r\\n  \\"hello\\" 0.0,\\r\\n  \\"which\\" 0.0,\\r\\n  \\"of\\" 0.0,\\r\\n  \\"run\\" 0.0,\\r\\n  \\"benefits\\" 0.0,\\r\\n  \\"demonstrate\\" 0.0,\\r\\n  \\"application\\" 0.0,\\r\\n  \\"a\\" 0.0,\\r\\n  \\"on\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"create\\" 0.0,\\r\\n  \\"will\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"containers\\" 0.0,\\r\\n  \\"we\\" 0.0,\\r\\n  \\"simple\\" 0.0,\\r\\n  \\"the\\" 0.0,\\r\\n  \\"world\\" 0.0,\\r\\n  \\"nodejs\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"running\\" 0.0,\\r\\n  \\"by\\" 0.0,\\r\\n  \\"http\\" 0.0,\\r\\n  \\"another\\" 0.0,\\r\\n  \\"an\\" 0.0,\\r\\n  \\"distributed\\" 0.0,\\r\\n  \\"on\\" 0.0,\\r\\n  \\"instance\\" 0.0,\\r\\n  \\"be\\" 0.0,\\r\\n  \\"nodes\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"haproxy\\" 0.0,\\r\\n  \\"these\\" 0.0,\\r\\n  \\"will\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"requests\\" 0.0,\\r\\n  \\"contain\\r\\ner\\" 0.0,\\r\\n  \\"nodejs\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"applications\\" 0.0,\\r\\n  \\"is\\" 0.0,\\r\\n  \\"used\\" 0.0,\\r\\n  \\"run\\" 0.0,\\r\\n  \\"define\\" 0.0,\\r\\n  \\"a\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"and\\" 0.0,\\r\\n  \\"docker\\" 0.0,\\r\\n  \\"tool\\" 0.0,\\r\\n  \\"with\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"complex\\" 0.0}\\r\\n {\\"\\" 0.0,\\r\\n  \\"running\\" 0.0,\\r\\n  \\"which\\" 0.0,\\r\\n  \\"up\\" 0.0,\\r\\n  \\"command\\" 0.0,\\r\\n  \\"does\\" 0.0,\\r\\n  \\"it\\" 0.0,\\r\\n  \\"you\\" 0.0,\\r\\n  \\"can\\" 0.0,\\r\\n  \\"that\\" 0.0,\\r\\n  \\"application\\" 0.0,\\r\\n  \\"define\\" 0.0,\\r\\n  \\"spin\\" 0.0,\\r\\n  \\"a\\" 0.0,\\r\\n  \\"be\\" 0.0,\\r\\n  \\"compose\\" 0.0,\\r\\n  \\"and\\" 0.0,\\r\\n  \\"everything\\" 0.0,\\r\\n  \\"with\\" 0.0,\\r\\n  \\"file\\" 0.0,\\r\\n  \\"single\\" 0.0,\\r\\n  \\"then\\" 0.0,\\r\\n  \\"needs\\" 0.0,\\r\\n  \\"your\\" 0.0,\\r\\n  \\"to\\" 0.0,\\r\\n  \\"multicontainer\\" 0.0,\\r\\n  \\"get\\" 0.0,\\r\\n  \\"done\\" 0.0,\\r\\n  \\"in\\" 0.0}]]\\r\\n                   (let [cos-sim-i-j\\r\\n                     (cosine-similarity  i j)]\\r\\n                       (if (>\= cos-sim-i-j\\r\\n                         0.2) cos-sim-i-j 0)))))))" "degrees (->> (rows [[0 0 0 0 0]\\r\\n [0 0 0 0 0]\\r\\n [0 0 0 0 0]\\r\\n [0 0 0 0 0]\\r\\n [0 0 0 0 0]])\\r\\n                   (mapv (partial reduce +)))" "(->> (rows [[0 0 0 0 0]\\r\\n    [0 0 0 0 0]\\r\\n    [0 0 0 0 0]\\r\\n    [0 0 0 0 0]\\r\\n    [0 0 0 0 0]])\\r\\n                      (mapv (partial reduce +)))" "(rows [[0 0 0 0 0]\\r\\n       [0 0 0 0 0]\\r\\n       [0 0 0 0 0]\\r\\n       [0 0 0 0 0]\\r\\n       [0 0 0 0 0]])\\r\\n                         (mapv (partial reduce +))" "(rows [[0 0 0 0 0]\\r\\n          [0 0 0 0 0]\\r\\n          [0 0 0 0 0]\\r\\n          [0 0 0 0 0]\\r\\n          [0 0 0 0 0]])\\r\\n                            (mapv (partial reduce +))" "(->> (rows [[0 0 0 0 0]\\r\\n       [0 0 0 0 0]\\r\\n       [0 0 0 0 0]\\r\\n       [0 0 0 0 0]\\r\\n       [0 0 0 0 0]])\\r\\n                         (mapv (partial reduce +)))" "(matrix  (into []\\r\\n                                         (for [i (range (count [0 0 0 0 0]))]\\r\\n                                           (/  (get-row [[0 0 0 0 0]\\r\\n [0 0 0 0 0]\\r\\n [0 0 0 0 0]\\r\\n [0 0 0 0 0]\\r\\n [0 0 0 0 0]] i)\\r\\n                                               (get [0 0 0 0 0] i)))))" "(matrix  (into []\\r\\n                                            (for [i (range (count [0 0 0 0 0]))]\\r\\n                                              (/  (get-row [[0 0 0 0 0]\\r\\n    [0 0 0 0 0]\\r\\n    [0 0 0 0 0]\\r\\n    [0 0 0 0 0]\\r\\n    [0 0 0 0 0]] i)\\r\\n                                                  (get [1 1 1 1 1] i)))))" "(gen-docs-w-sentences \\"test-documents\\")" "(gen-idf-map-from-docs-sentences\\r\\n                 [[\\"in this blog post we gonna walk you through the different steps that are necessary to get you started with docker compose and show how to use it\\"]\\r\\n [\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]])" "(lexrank \\"test-documents\\" 0.2 0.1 3)" "(gen-docs-w-sentences \\"test-documents\\")" "(gen-idf-map-from-docs-sentences\\r\\n                 [[]\\r\\n [\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n  \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n  \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n  \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n  \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"]])" "(vector [] [1 2 3])" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3 false)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3 true)" "(lexrank \\"test-documents\\" 0.2 0.1 3 true)" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3 false)" "(vector([] (sentences-in-document \\"test-documents/test2.txt\\")))" "(sentences-in-document \\"test-documents/test2.txt\\")" "(vector [] [1 2 6 500])" "(vector [] [\\"a\\" \\"s\\"])" "(vector [] [\\"in this blog post, we will walk you through the different steps that are necessary to get you started with docker compose and show you how to use it\\"\\r\\n \\" to demonstrate the benefits of docker compose, we will create a simple nodejs hello world application, which will run on 3 docker nodejs containers\\"\\r\\n \\" http requests will be distributed to these nodejs nodes by an haproxy instance running on another docker container\\"\\r\\n \\" compose is a tool used to define and run complex applications with docker\\"\\r\\n \\" with compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running\\"])" "(vector([] (sentences-in-document \\"test-documents/test2.txt\\")))" "(let test (sentences-in-document \\"test-documents/test2.txt\\") (vector([] test)))" "(->> (vector([] (sentences-in-document path))))" "(->> (vector([] (sentences-in-document \\"test-documents/test2.txt\\"))))" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3 false)" "(sentences-in-document \\"test-documents/test2.txt\\")" "(sentences-in-text \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\")" "(lexrank \\"test-documents/test2.txt\\" 0.2 0.1 3 false)" "(sentences-in-document \\"test-documents/test2.txt\\")" " (sentences-in-text \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\")" "(lexrank text 0.2 0.1 3 false)" "(lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false)" "(join \\"\\\\n\\" [\\"asfdasfda\\" \\"safdsadfa\\" \\"sadfdsdc\\"])" "(map join \\"\\\\n\\" [\\"asfdasfda\\" \\"safdsadfa\\" \\"sadfdsdc\\"])" "(join \\"\\\\n\\" [\\"asfdasfda\\" \\"safdsadfa\\" \\"sadfdsdc\\"])" "(use '[clojure.string \:only (join split)])" "(join \\"\\\\n\\" [\\"asfdasfda\\" \\"safdsadfa\\" \\"sadfdsdc\\"])" "(join \\"\\\\n\\" (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" "(join \\"\\\\n\\" str (\\"-\\" (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false)))" "(join \\"\\\\n\\\\n\\" (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" "(join \\"- \\\\n\\\\n\\"(lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" "(lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false)" "(str \\"\\\\n\\" (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" "(lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false)" "(type (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" "(take (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" "(lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false)" "(handle-getsummary \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\")" "(str (lexrank \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 0.2 0.1 3 false))" " (spit \\"/data/usr.txt\\" \\r\\n        (str \\"text\\" \\" \\") \\r\\n        \:append true)" "(\:require [clojure.java.io \:as io] )" "(io/file\\r\\n                 (io/resource \\r\\n                   \\"hello.txt\\" ))" "(use 'fileupload.core)" "(get-all-texts)" "(mc/find-maps db \\"textsummary\\")" "(db/get-text-summary-by-username (session/get \:user))" "(db/get-text-summary-by-username \\"usr\\")" "(improve_training_txt \\"nesto\\")" "(improve_training_txt \\"dscds\\")" "(defn improve_training_txt [text]\\r\\n  (if (< (.length (io/file \\"data/big.txt\\")) 1304300) \\r\\n    (if(spit \\"data/big.txt\\" \\r\\n        (str text \\" \\") \\r\\n        \:append true))) true)" "(defn improve_training_txt [text]\\r\\n     (if (< (.length (io/file \\"data/big.txt\\")) 1304300) \\r\\n       (if(spit \\"data/big.txt\\" \\r\\n           (str text \\" \\") \\r\\n           \:append true) true)) )" "(improve_training_txt \\"nesto\\")" "([word])" "(doc word)" "ns" "(word \\"adas asd a\\")" "(doc words)" "(defn- split-word [word i] \\r\\n  [(.substring word 0 i) (.substring word i)])" "(split-word \\"nekarec\\" 2)" "(split-word \\"nekarec\\" 6)" "(defn- replace-split [[w1 w2]]\\r\\n  (let [w2-0 (.substring w2 1)]\\r\\n    (map \#(str w1 % w2-0) alphabet)))" "(replace-split \\"dan\\")" "(replace-split \\"dan\\" \\"br\\")" "(replace-split [\\"dan\\" \\"br\\"])" "(defn- replace-split2 [[w1 w2]]\\r\\n     (let [w2-0 (.substring w2 1)]\\r\\n       (map \#(str w1 % w2-1) alphabet)))" "(defn- replace-split2 [[w1 w2]]\\r\\n        (let [w2-0 (.substring w2 1)]\\r\\n          (map \#(str w1 % w2-1) alphabet)))" "(str/join \\"a\\" \\"b\\")" "(string/join \\"a\\" \\"b\\")" "(str/join \\"a\\" \\"basda\\")" "(string/join \\"aasdas\\" \\"bgtdhrft\\")" "(string/join \\"rad\\" \\"ovan\\")" "(replace-split [\\"dan\\" \\"br\\"])" "(string/join \\"rad\\" [\\"anti\\" \\"de\\" \\"dis\\"])" "(string/join \\"rad\\" [\\"anti\\" \\" de\\" \\" dis\\"])" "(use '[clojure.set \:only (union)])\\r\\n(use 'clojure.java.io)\\r\\n\\r\\n(def ^\:private ^\:const token-regex \#\\"[a-z]+\\")\\r\\n\\r\\n(defn- words [text] \\r\\n  \\"Using a regular expression for tokenizing \\r\\n   a string into words.\\"\\r\\n  (re-seq token-regex (string/lower-case text)))\\r\\n\\r\\n(defn- train [feats]\\r\\n  \\"Training data structure consists of words and their frequencies.\\"\\r\\n  (frequencies feats))\\r\\n\\r\\n(def ^\:private n-words \\r\\n  (train (words\\r\\n           (slurp \\"data/big.txt\\"))))\\r\\n\\r\\n(def ^\:private ^\:const alphabet\\r\\n  \\"abcdefghijklmnopqrstuvwxyz\\")\\r\\n\\r\\n; We are defining 5 operations for \\r\\n\\r\\n(defn- split-word [word i] \\r\\n  \\"Splits the word in two parts, with length of first part equal to i\\"\\r\\n  [(.substring word 0 i) (.substring word i)])\\r\\n\\r\\n(defn- delete-char [[w1 w2]]\\r\\n  \\"Removes one character from the word to get word variations.\\"\\r\\n  (str w1 (.substring w2 1)))\\r\\n\\r\\n(defn- transpose-split [[w1 w2]]\\r\\n  \\"Transposes two characters get word variations.\\"\\r\\n  (str w1 (second w2) (first w2) (.substring w2 2)))\\r\\n\\r\\n(defn- replace-split [[w1 w2]]\\r\\n  (let [w2-0 (.substring w2 1)]\\r\\n    (map \#(str w1 % w2-0) alphabet)))\\r\\n\\r\\n(defn- insert-split [[w1 w2]]\\r\\n  (map \#(str w1 % w2) alphabet))" "(map (partial split-word word)\\r\\n                    (range (inc (count word))))" "(map (partial split-word \\"da\\")\\r\\n                    (range (inc (count \\"da\\"))))" "(filter \#(> (count (second %)) 1) \\r\\n                            (map (partial split-word \\"da\\")\\r\\n                       (range (inc (count \\"da\\")))))" "(filter \#(> (count (second %)) 1) \\r\\n                               (map (partial split-word \\"backbone\\")\\r\\n                          (range (inc (count \\"backbone\\")))))" "(string/join ([\\"\\" \\"backbone\\"]\\r\\n [\\"b\\" \\"ackbone\\"]\\r\\n [\\"ba\\" \\"ckbone\\"]\\r\\n [\\"bac\\" \\"kbone\\"]\\r\\n [\\"back\\" \\"bone\\"]\\r\\n [\\"backb\\" \\"one\\"]\\r\\n [\\"backbo\\" \\"ne\\"]) [\\"anti\\" \\" de\\" \\" dis\\"])" "(map string/join ([\\"\\" \\"backbone\\"]\\r\\n    [\\"b\\" \\"ackbone\\"]\\r\\n    [\\"ba\\" \\"ckbone\\"]\\r\\n    [\\"bac\\" \\"kbone\\"]\\r\\n    [\\"back\\" \\"bone\\"]\\r\\n    [\\"backb\\" \\"one\\"]\\r\\n    [\\"backbo\\" \\"ne\\"]) [\\"anti\\" \\" de\\" \\" dis\\"])" "(defn- delete-char [[w1 w2]]\\r\\n  \\"Removes one character from the word to get word variations.\\"\\r\\n  (str w1 (.substring w2 1)))" "(delete-char \\"Radovan\\")" "(delete-char [\\"Rad\\" \\"ovan\\"])" "(.substring \\"radovan\\" 1)" "(defn- words [text] \\r\\n  \\"Using a regular expression for tokenizing \\r\\n   a string into words.\\"\\r\\n  (re-seq token-regex (string/lower-case text)))" "(words \\"they aren't here\\")" "(def ^\:private ^\:const token-regex \#\\"[a-z']+\\")" "(defn- words [text] \\r\\n  \\"Using a regular expression for tokenizing \\r\\n   a string into words.\\"\\r\\n  (re-seq token-regex (string/lower-case text)))" "(words \\"they aren't here\\")" "(defn- replace-split [[w1 w2]]\\r\\n  (let [w2-0 (.substring w2 1)]\\r\\n    (map \#(str w1 % w2-0) alphabet)))" "(replace-split [\\"rad\\" \\"ovan\\"])" "(defn- replace-apostrophe [[w1 w2]]\\r\\n     (let [w2-0 (.substring w2 1)]\\r\\n       (map \#(str w1 % w2-0) \\"'\\")))" "(replace-apostrophe [\\"rad\\" \\"ovan\\"])" "(defn- replace-apostrophe [[w1 w2]]\\r\\n        (let [w2-0 (.substring w2 \#(> (count (w2)) 1) )]\\r\\n          (map \#(str w1 % w2-0) \\"'\\")))" "(replace-apostrophe [\\"rad\\" \\"ovan\\"])" "(defn- replace-apostrophe [[w1 w2]]\\r\\n           (let [(map w2-0 (.substring w2 \#(> (count (w2)) 1)) )]\\r\\n             ((str w1 % w2-0) \\"'\\")))" "(defn- replace-apostrophe [[w1 w2]]\\r\\n              (let [w2-0 (map  (.substring w2 \#(> (count (w2)) 1)))]\\r\\n                ((str w1 % w2-0) \\"'\\")))" "(defn- replace-apostrophe [[w1 w2]]\\r\\n                 (let [w2-0 (map  (.substring w2 \#(> (count (w2)) 1)))]\\r\\n                   ((str w1 w2-0) \\"'\\")))" "(replace-apostrophe [\\"rad\\" \\"ovan\\"])" "(defn- insert-split [[w1 w2]]\\r\\n  \\"Inserts a character into the word\\"\\r\\n  (map \#(str w1 % w2) alphabet))" "(insert-split \\"radovan\\")" "(insert-split \\"rad\\" \\"ovan\\")" "(insert-split [\\"rad\\" \\"ovan\\"])" "(defn- replace-split2 [[w1 w2]]\\r\\n  \\"Replaces one letter by another character from the alphabet\\r\\n   that we defined as private constant.\\"\\r\\n  (let [w2-0 (.substring w2 1)]\\r\\n    (map \#(str w1 % w2-0) [alphabet \\"'\\"])))" "(replace-split2 \\"radovan\\")" "(replace-split2 \\"rad\\" \\"ovan\\")" "(replace-split2 [\\"rad\\" \\"ovan\\"])" "(defn- replace-split-extended [[w1 w2]]\\r\\n  \\"Replaces one letter by another character from the alphabet\\r\\n   that we defined as private constant.\\"\\r\\n  (let [w2-0 (.substring w2 1)]\\r\\n    (map \#(str w1 % w2-0) \\"'\\")))" "(replace-split-extended [\\"rad\\" \\"ovan\\"])" "(defn- replace-split-extended [[w1 w2]]\\r\\n  \\"Replaces one letter by another character from the alphabet\\r\\n   that we defined as private constant.\\"\\r\\n  (let [w2-0 w2]\\r\\n    (map \#(str w1 % w2-0) \\"-\\")))" "(replace-split-extended [\\"rad\\" \\"ovan\\"])" "(gen-docs-w-sentences \\"/tsttxt\\")" "(gen-docs-w-sentences \\"tsttxt\\")" "(sentences-in-text \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\")" "(vector [\\"a\\" \\"is\\" \\"the\\" \\"or\\" \\"not\\" \\"and\\"] (sentences-in-text \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\"))" "(get-thesis \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" \\"afe\\")" "(get-thesis \\"are\\" \\"In this blog post, we will walk you through the different steps that are necessary to get you started with Docker Compose and show you how to use it. To demonstrate the benefits of Docker Compose, we will create a simple Nodejs Hello World application, which will run on 3 Docker Nodejs containers. HTTP requests will be distributed to these Nodejs nodes by an HAProxy instance running on another Docker container. Compose is a tool used to define and run complex applications with Docker. With compose, you can define a multicontainer application in a single file and then spin your application up in a single command, which does everything that needs to be done to get it running.\\" 3)"]
eclipse.preferences.version=1
